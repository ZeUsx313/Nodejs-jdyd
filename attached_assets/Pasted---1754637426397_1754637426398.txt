بالتأكيد. أنت على حق تمامًا. تعديل ملف بهذا الحجم يتطلب تعليمات دقيقة جدًا لضمان عدم حدوث أي أخطاء.

لقد قمت بإعداد "برومبت" (Prompt) احترافي وشامل، مصمم خصيصًا ليتم إعطاؤه لوكيل ذكاء اصطناعي. هذا البرومبت يحدد بدقة **ما يجب تعديله، وما يجب إضافته، وما يجب عدم المساس به على الإطلاق**.

---

### **البرومبت الشامل لتعديل الواجهة الأمامية (`script.js`)**

**المهمة:** بصفتك خبير JavaScript، قم بتعديل ملف `script.js` التالي لتطبيق نظام تسجيل دخول المستخدمين باستخدام جوجل. **لا تقم بحذف أو تعديل أي وظيفة موجودة لم أذكرها صراحة.** التزم بالتعليمات التالية بدقة متناهية.

**الهدف:** ربط الواجهة الأمامية بنقاط النهاية (API endpoints) الموجودة في الخادم (`/api/user`, `/auth/google`, `/auth/logout`) لتوفير تجربة تسجيل دخول وخروج سلسة.

---

#### **الخطوة 1: تعديل المتغير العام `API_ENDPOINT`**

في بداية الملف، ستجد هذا السطر:
```javascript
const API_ENDPOINT = '/api/chat';
```
**المطلوب:** قم بتغييره ليكون متغيرًا عاديًا بدلاً من ثابت، وأضف متغيرًا جديدًا لرابط الخادم. يجب أن يصبح الكود هكذا:

```javascript
// ✨ تعديل: تحديد رابط الخادم والـ API
let API_BASE_URL = ''; // سيتم تحديده لاحقًا
const API_ENDPOINT_CHAT = '/api/chat';
```

---

#### **الخطوة 2: إضافة متغير عام جديد لحالة المستخدم**

بعد قسم المتغيرات العامة مباشرة، أضف هذا المتغير الجديد لتخزين معلومات المستخدم الذي قام بتسجيل الدخول:
```javascript
// ✨ إضافة: متغير لتخزين معلومات المستخدم الحالي
let currentUser = null;
```

---

#### **الخطوة 3: تعديل دالة `sendMessage` لإرسال الطلبات إلى الخادم الصحيح**

ابحث عن دالة `sendMessage`. بداخلها، ستجد استدعاء لدالة `sendToAIWithStreaming`. **لا تعدل هذه الدالة.** التعديل المطلوب هو في دالة `sendRequestToServer` التي تستدعيها `sendToAIWithStreaming`.

ابحث عن دالة `sendRequestToServer`. ستجد فيها هذا السطر:
```javascript
const response = await fetch(API_ENDPOINT, {
```
**المطلوب:** قم بتعديل هذا السطر ليستخدم المتغيرات الجديدة التي عرفناها. يجب أن يصبح هكذا:
```javascript
const response = await fetch(API_BASE_URL + API_ENDPOINT_CHAT, {
```

---

#### **الخطوة 4: إضافة دوال جديدة لإدارة المستخدمين وتسجيل الدخول**

**المطلوب:** قم بإضافة الدوال الجديدة التالية بالكامل في نهاية ملف `script.js`. هذه الدوال مسؤولة عن التحقق من حالة المستخدم، عرض معلوماته، وتنفيذ عمليات تسجيل الدخول والخروج.

```javascript
// ===============================================
// ✨ قسم جديد: نظام تسجيل الدخول والخروج
// ===============================================

/**
 * يتحقق من حالة تسجيل دخول المستخدم عند تحميل الصفحة.
 */
async function checkUserStatus() {
    try {
        // أولاً، نحدد رابط الخادم
        // في بيئة التطوير المحلية، استخدم http://localhost:3000
        // في بيئة الإنتاج (Vercel)، استخدم رابط Railway
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            API_BASE_URL = 'http://localhost:3000';
        } else {
            // ✨ هام: يجب استبدال هذا الرابط برابط Railway الخاص بك
            API_BASE_URL = 'https://chatzeus-production.up.railway.app';
        }
        console.log(`API Base URL set to: ${API_BASE_URL}`);

        const response = await fetch(`${API_BASE_URL}/api/user`);
        if (!response.ok) {
            throw new Error(`Server responded with status: ${response.status}`);
        }
        const data = await response.json();

        if (data.loggedIn && data.user) {
            currentUser = data.user;
            console.log("User is logged in:", currentUser);
            updateUserDisplay();
        } else {
            currentUser = null;
            console.log("User is not logged in.");
            updateUserDisplay();
        }
    } catch (error) {
        console.error("Error checking user status:", error);
        currentUser = null;
        updateUserDisplay(); // عرض زر تسجيل الدخول في حالة حدوث خطأ
    }
}

/**
 * تحديث واجهة المستخدم لعرض معلومات المستخدم أو زر تسجيل الدخول.
 */
function updateUserDisplay() {
    const userInfoContainer = document.getElementById('user-info-container');
    if (!userInfoContainer) return;

    if (currentUser) {
        // المستخدم مسجل دخوله - عرض معلوماته مع قائمة منسدلة
        userInfoContainer.innerHTML = `
            <div class="dropdown">
                <div class="flex items-center space-x-2 space-x-reverse cursor-pointer p-1 rounded-lg hover:bg-gray-700/50 transition-colors">
                    <img src="${currentUser.picture}" alt="User Avatar" class="w-8 h-8 rounded-full border-2 border-gray-600">
                    <span class="text-white font-medium hidden md:block">${currentUser.name.split(' ')[0]}</span>
                    <i class="fas fa-chevron-down text-gray-400 text-xs"></i>
                </div>
                <div class="dropdown-content">
                    <div class="px-4 py-3 text-sm text-gray-200">
                        <div>${currentUser.name}</div>
                        <div class="font-medium truncate">${currentUser.email}</div>
                    </div>
                    <hr class="border-gray-600">
                    <a href="#" onclick="logout()" class="dropdown-item">
                        <i class="fas fa-sign-out-alt fa-fw ml-2"></i>
                        <span>تسجيل الخروج</span>
                    </a>
                </div>
            </div>
        `;
    } else {
        // المستخدم غير مسجل دخول - عرض زر تسجيل الدخول
        userInfoContainer.innerHTML = `
            <button onclick="loginWithGoogle()" class="flex items-center space-x-2 space-x-reverse bg-white hover:bg-gray-200 text-gray-800 px-4 py-2 rounded-lg transition-colors duration-200 transform hover:scale-105 text-sm font-semibold shadow-md">
                <svg class="w-5 h-5" viewBox="0 0 18 18"><g fill-rule="evenodd"><path d="M17.64 9.2045c0-.6381-.0573-1.2518-.1636-1.8409H9.1818v3.4818h4.7909c-.2045 1.125-.8227 2.0782-1.7773 2.7218v2.2591h2.9091c1.7045-1.5682 2.6864-3.8727 2.6864-6.6218z" fill="#4285F4"></path><path d="M9.1818 18c2.4455 0 4.4955-.8127 5.9955-2.1818l-2.9091-2.2591c-.8127.5455-1.8545.8727-3.0864.8727-2.3364 0-4.3182-1.5682-5.0364-3.6545H1.2727v2.3364C2.9636 16.2 5.7818 18 9.1818 18z" fill="#34A853"></path><path d="M4.1455 10.8818c-.1136-.3273-.1818-.6818-.1818-1.0455s.0682-.7182.1818-1.0455V6.4545H1.2727C.9455 7.1455.7273 7.9091.7273 8.7273c0 .8182.2182 1.5818.5455 2.2727l2.8727-2.1182z" fill="#FBBC05"></path><path d="M9.1818 3.6545c1.3273 0 2.5182.4545 3.4545 1.3636l2.5818-2.5818C13.6773.9818 11.6273 0 9.1818 0 5.7818 0 2.9636 1.8 1.2727 4.1182l2.8727 2.3364c.7182-2.0864 2.7-3.6545 5.0364-3.6545z" fill="#EA4335"></path></g></svg>
                <span>تسجيل الدخول بـ Google</span>
            </button>
        `;
    }
}

/**
 * تبدأ عملية تسجيل الدخول.
 */
function loginWithGoogle() {
    showNotification('جارٍ توجيهك لتسجيل الدخول...', 'info');
    window.location.href = `${API_BASE_URL}/auth/google`;
}

/**
 * تبدأ عملية تسجيل الخروج.
 */
function logout() {
    showNotification('جارٍ تسجيل الخروج...', 'info');
    window.location.href = `${API_BASE_URL}/auth/logout`;
}
```

---

#### **الخطوة 5: استدعاء دالة التحقق من المستخدم**

ابحث عن نهاية دالة `DOMContentLoaded`. قبل القوس الأخير `});` مباشرة، أضف هذا السطر:
```javascript
    // ✨ إضافة: التحقق من حالة المستخدم عند تحميل الصفحة
    checkUserStatus();
```

---

#### **الخطوة 6: تعديل ملف `index.html` (تعليمات منفصلة)**

**ملاحظة للوكيل:** هذه التعليمات خاصة بملف `index.html`.

ابحث عن هذا الجزء في ملف `index.html`:
```html
<div class="flex items-center space-x-2 space-x-reverse">
    <button onclick="toggleDarkMode()" class="p-2 rounded-lg text-gray-400 hover:text-gray-200 hover:bg-gray-800 transition-colors" title="تبديل النمط">
        <i id="themeIcon" class="fas fa-moon text-lg"></i>
    </button>
    <button onclick="openSettings()" class="p-2 rounded-lg text-gray-400 hover:text-gray-200 hover:bg-gray-800 transition-colors" title="الإعدادات">
        <i class="fas fa-cog text-lg"></i>
    </button>
</div>
```
**المطلوب:** قم بإضافة حاوية جديدة لمعلومات المستخدم **قبل** زر تبديل النمط. يجب أن يصبح الكود هكذا:

```html
<div class="flex items-center space-x-2 space-x-reverse">
    <!-- ✨ إضافة: حاوية معلومات المستخدم ✨ -->
    <div id="user-info-container">
        <!-- سيتم ملء هذا الجزء بواسطة JavaScript -->
    </div>

    <button onclick="toggleDarkMode()" class="p-2 rounded-lg text-gray-400 hover:text-gray-200 hover:bg-gray-800 transition-colors" title="تبديل النمط">
        <i id="themeIcon" class="fas fa-moon text-lg"></i>
    </button>
    <button onclick="openSettings()" class="p-2 rounded-lg text-gray-400 hover:text-gray-200 hover:bg-gray-800 transition-colors" title="الإعدادات">
        <i class="fas fa-cog text-lg"></i>
    </button>
</div>
```

---

#### **الخطوة 7: تعديل ملف `style.css` (تعليمات منفصلة)**

**ملاحظة للوكيل:** هذه التعليمات خاصة بملف `style.css`.

**المطلوب:** أضف الأنماط التالية في نهاية ملف `style.css` لدعم القائمة المنسدلة للمستخدم.

```css
/* =============================================== */
/* ✨ أنماط جديدة: القائمة المنسدلة للمستخدم */
/* =============================================== */

.dropdown {
    position: relative;
    display: inline-block;
}

.dropdown-content {
    display: none;
    position: absolute;
    left: 0; /* محاذاة لليسار لتناسب الواجهة العربية */
    background-color: #1f2937; /* لون أغمق قليلاً */
    min-width: 220px;
    box-shadow: 0 8px 16px rgba(0,0,0,0.3);
    z-index: 100;
    border-radius: 0.5rem;
    border: 1px solid #374151;
    margin-top: 0.5rem;
    overflow: hidden;
    animation: fadeIn 0.2s ease-out;
}

.dropdown:hover .dropdown-content {
    display: block;
}

.dropdown-item {
    color: #d1d5db;
    padding: 0.75rem 1rem;
    text-decoration: none;
    display: flex; /* استخدام flex لمحاذاة الأيقونة والنص */
    align-items: center;
    transition: background-color 0.2s ease;
    font-size: 0.875rem;
}

.dropdown-item:hover {
    background-color: #374151;
    color: #ffffff;
}
```

---

**الملف الأصلي للمقارنة (لا تقم بتعديله، استخدمه كمرجع فقط):**

```javascript
// الصق هنا محتوى ملف script.js الأصلي بالكامل (2560 سطرًا)
```

**الخلاصة:** قم بتنفيذ الخطوات من 1 إلى 7 بدقة. هذه التعديلات ستضيف نظام تسجيل دخول فعال دون التأثير على أي من الميزات الحالية للتطبيق.